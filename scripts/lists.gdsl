contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCrucible")){method(name:"add",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addConstellationAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShapeless",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<crafttweaker.api.item.IIngredient>", arg3: "crafttweaker.api.recipes.IRecipeFunction", arg4: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.parts.IPartBuilder")){method(name:"setAdditionalOreDictNames",type:"com.teamacronymcoders.contenttweaker.modules.materials.parts.IPartBuilder",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.BigCrafting")){method(name:"addShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.levellocking.SkillLocksTweaker")){method(name:"addLevelLock",type:"void",params: [arg0: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTSkill", arg1: "int", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "elucent.rootsclassic.compat.SpellZen")){method(name:"setSpellItems",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.magneticraft.MagMultiBlockGates")){method(name:"addGate",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCauldron")){method(name:"remove",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.expand.IEntityAspectExpansion")){method(name:"removeAspects",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", ])}
contributor(context(ctype: "crafttweaker.mods.jei.JEI")){method(name:"addDescription",type:"void",params: [arg0: "crafttweaker.api.liquid.ILiquidStack", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "me.axieum.mcmod.pedestalcrafting.compat.crafttweaker.Pedestal")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "crafttweaker.api.item.IItemStack", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.entity.entitydamageevent.EntityDamageEventTweaker")){method(name:"addEntityLock",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.GiantCrafting")){method(name:"addShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addAttunmentAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"removeShaped",type:"void",params: [arg0: "crafttweaker.api.item.IIngredient", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "crafttweaker.api.oredict.IOreDictEntry")){method(name:"add",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", arg2: "crafttweaker.api.recipes.IRecipeFunction", arg3: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addTraitAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemStack")){method(name:"withLore",type:"crafttweaker.api.item.IItemStack",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.NBTLockTweaker")){method(name:"addModNBTLock",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.data.IData", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.entity.entitymountevent.EntityMountEventTweaker")){method(name:"addMountLock",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"createPotion",type:"crafttweaker.api.item.IItemStack",params: [arg0: "List<List<java.lang.Object>>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.tinkersconstruct.materiallocks.MaterialLockTweaker")){method(name:"addMaterialLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.materials.IMaterial")){method(name:"registerParts",type:"java.util.List",params: [arg0: "List<com.teamacronymcoders.contenttweaker.modules.materials.parts.IPart>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Hopper")){method(name:"addFilteredItem",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.armor.ArmorLockTweaker")){method(name:"addArmorLock",type:"void",params: [arg0: "double", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "snownee.cuisine.plugins.crafttweaker.CTMortar")){method(name:"remove",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.bloodmagic.ritualhandler.RitualHandlerTweaker")){method(name:"addRitualCrystalLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.expand.IItemAspectExpansion")){method(name:"setAspects",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", ])}
contributor(context(ctype: "crafttweaker.api.oredict.IOreDictEntry")){method(name:"remove",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.bloodmagic.ritualhandler.RitualHandlerTweaker")){method(name:"addRitualCostLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait")){method(name:"createNewTrait",type:"codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait",params: [arg0: "java.lang.String", arg1: "int", arg2: "int", arg3: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTSkill", arg4: "int", arg5: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.skillchange.SkillChangeTweaker")){method(name:"addUnlockableLockCommands",type:"void",params: [arg0: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTUnlockable", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.gamestages.gamestagelocks.GameStageLockTweaker")){method(name:"addGameStageLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.HugeCrafting")){method(name:"addShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.oredict.IOreDictEntry")){method(name:"addItems",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.oreexcavator.tweakers.ExcavationLockTweaker")){method(name:"addExcavationLock",type:"void",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.bloodmagic.TartaricForge")){method(name:"removeRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Brew")){method(name:"addRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IIngredient>", arg1: "java.lang.String", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"createPotion",type:"crafttweaker.api.item.IItemStack",params: [arg0: "List<crafttweaker.api.potions.IPotionEffect>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCrucible")){method(name:"add",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addElvenPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.thaumcraft.ThaumcraftTweaker")){method(name:"addResearchLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"removeShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IIngredient", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "boolean", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"enchantItem",type:"crafttweaker.api.item.IItemStack",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.enchantments.IEnchantment>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addInfusionPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<crafttweaker.api.item.IIngredient>", arg5: "List<int>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addCraftingPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addHiddenShapeless",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<crafttweaker.api.item.IIngredient>", arg3: "crafttweaker.api.recipes.IRecipeFunction", arg4: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "crafttweaker.api.command.ICommand")){method(name:"execute",type:"void",params: [arg0: "crafttweaker.api.server.IServer", arg1: "crafttweaker.api.command.ICommandSender", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.expand.IItemAspectExpansion")){method(name:"removeAspects",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addDiscoveryAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.CTMaterialSystem")){method(name:"registerPartsForMaterial",type:"java.util.List",params: [arg0: "com.teamacronymcoders.base.materialsystem.materials.Material", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "rustic.compat.crafttweaker.Condenser")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addTraitAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", arg5: "java.lang.String", ])}
contributor(context(ctype: "crafttweaker.mods.jei.JEI")){method(name:"addDescription",type:"void",params: [arg0: "crafttweaker.api.oredict.IOreDictEntry", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addAttunmentAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.parts.IPart")){method(name:"registerToMaterials",type:"java.util.List",params: [arg0: "List<com.teamacronymcoders.contenttweaker.modules.materials.materials.IMaterial>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.projecte.ProjectETweaker")){method(name:"addEMCLock",type:"void",params: [arg0: "long", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.Infusion")){method(name:"registerRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "crafttweaker.api.item.IItemStack", arg3: "int", arg4: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", arg5: "crafttweaker.api.item.IIngredient", arg6: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShapedMirrored",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<List<crafttweaker.api.item.IIngredient>>", arg3: "crafttweaker.api.recipes.IRecipeFunction", arg4: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addPetalPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.ArcaneWorkbench")){method(name:"registerShapedRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", arg4: "crafttweaker.api.item.IItemStack", arg5: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.materials.IMaterial")){method(name:"registerParts",type:"java.util.List",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.RequirementTweaker")){method(name:"addRequirement",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.ModLockTweaker")){method(name:"addModLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Anvil")){method(name:"removeShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addDiscoveryAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Hopper")){method(name:"removeRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", arg1: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.skillchange.SkillChangeTweaker")){method(name:"addUnlockableUnlockCommands",type:"void",params: [arg0: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTUnlockable", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.mods.jei.JEI")){method(name:"addDescription",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "fluke.treetweaker.zenscript.TreeRepresentation")){method(name:"setDimWhitelist",type:"void",params: [arg0: "List<int>", ])}
contributor(context(ctype: "me.axieum.mcmod.pedestalcrafting.compat.crafttweaker.Pedestal")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "crafttweaker.api.item.IItemStack", arg3: "List<crafttweaker.api.item.IIngredient>", arg4: "List<List<java.lang.String>>", arg5: "List<List<java.lang.String>>", arg6: "List<List<java.lang.String>>", ])}
contributor(context(ctype: "crafttweaker.api.command.ICommand")){method(name:"isUsernameIndex",type:"boolean",params: [arg0: "List<java.lang.String>", arg1: "int", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.LootBag")){method(name:"addLoot",type:"void",params: [arg0: "crafttweaker.api.item.WeightedItemStack", arg1: "List<int>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addTraitAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", arg4: "java.lang.String", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addAttunementAltarRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "int", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.bloodmagic.ritualhandler.RitualHandlerTweaker")){method(name:"addRitualLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Apothecary")){method(name:"addRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.tconstruct.Alloy")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.liquid.ILiquidStack", arg1: "List<crafttweaker.api.liquid.ILiquidStack>", ])}
contributor(context(ctype: "com.blamejared.compat.bloodmagic.TartaricForge")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "double", arg3: "double", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShaped",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<List<crafttweaker.api.item.IIngredient>>", arg3: "crafttweaker.api.recipes.IRecipeFunction", arg4: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "elucent.rootsclassic.compat.RitualZen")){method(name:"addCraftingRitual",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "double", arg4: "double", arg5: "double", arg6: "List<crafttweaker.api.item.IItemStack>", arg7: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Apothecary")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.HugeCrafting")){method(name:"addShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addBrewPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "java.lang.String", arg4: "List<crafttweaker.api.item.IIngredient>", arg5: "java.lang.String", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"combineEnchantments",type:"crafttweaker.api.data.IData",params: [arg0: "List<crafttweaker.api.enchantments.IEnchantment>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.entity.animaltameevent.AnimalTameEventTweaker")){method(name:"addTameLock",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Anvil")){method(name:"addShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.tinkersconstruct.modifierlocks.ModifierLockTweaker")){method(name:"addModifierLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"combineEnchantments",type:"crafttweaker.api.data.IData",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.enchantments.IEnchantment>", ])}
contributor(context(ctype: "com.blamejared.compat.tconstruct.Alloy")){method(name:"removeRecipe",type:"void",params: [arg0: "crafttweaker.api.liquid.ILiquidStack", arg1: "List<crafttweaker.api.liquid.ILiquidStack>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Anvil")){method(name:"removeShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IBrewingManager")){method(name:"addBrew",type:"void",params: [arg0: "crafttweaker.api.item.IIngredient", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "crafttweaker.api.item.IItemStack", arg3: "boolean", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.skillchange.SkillChangeTweaker")){method(name:"addLevelUpCommands",type:"void",params: [arg0: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTSkill", arg1: "int", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addConstellationAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTSkill")){method(name:"setLevelStaggering",type:"void",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.food.FoodTweaker")){method(name:"addHungerLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thermalexpansion.Centrifuge")){method(name:"addRecipeMob",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.WeightedItemStack>", arg2: "crafttweaker.api.liquid.ILiquidStack", arg3: "int", arg4: "int", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.tinkersconstruct.toollocks.ToolTypeLockTweaker")){method(name:"addToolTypeLock",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCrucible")){method(name:"remove",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.codetaylor.mc.advancedmortars.modules.mortar.integration.crafttweaker.ZenMortar")){method(name:"addRecipe",type:"void",params: [arg0: "List<java.lang.String>", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "crafttweaker.api.item.IItemStack", arg4: "float", arg5: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.thermalexpansion.Centrifuge")){method(name:"addRecipeMob",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<crafttweaker.api.item.WeightedItemStack>", arg2: "crafttweaker.api.liquid.ILiquidStack", arg3: "int", arg4: "int", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.harvestlevel.HarvestLevelTweaker")){method(name:"addBlockLevelLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.ElvenTrade")){method(name:"addRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addAlchemyPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<crafttweaker.api.item.IIngredient>", arg5: "List<int>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.NBTLockTweaker")){method(name:"addGenericNBTLock",type:"void",params: [arg0: "crafttweaker.api.data.IData", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.bloodmagic.AlchemyTable")){method(name:"removeRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait")){method(name:"createTrait",type:"codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait",params: [arg0: "java.lang.String", arg1: "int", arg2: "int", arg3: "java.lang.String", arg4: "int", arg5: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.Crucible")){method(name:"registerRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "crafttweaker.api.item.IItemStack", arg3: "crafttweaker.api.item.IIngredient", arg4: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.dimension.dimensionlocks.DimensionLockTweaker")){method(name:"addDimensionLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.harvestlevel.HarvestLevelTweaker")){method(name:"addToolLevelLock",type:"void",params: [arg0: "java.lang.String", arg1: "int", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.OreDictionaryTweaker")){method(name:"addOreDictLock",type:"void",params: [arg0: "crafttweaker.api.oredict.IOreDictEntry", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.item.IItemUtils")){method(name:"createEnchantedBook",type:"crafttweaker.api.item.IItemStack",params: [arg0: "List<crafttweaker.api.enchantments.IEnchantment>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShapedMirrored",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", arg2: "crafttweaker.api.recipes.IRecipeFunction", arg3: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.LootBag")){method(name:"removeLoot",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<int>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.BigCrafting")){method(name:"addShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait")){method(name:"createTrait",type:"codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait",params: [arg0: "java.lang.String", arg1: "int", arg2: "int", arg3: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTSkill", arg4: "int", arg5: "List<java.lang.String>", ])}
contributor(context(ctype: "wanion.biggercraftingtables.compat.crafttweaker.GiantCrafting")){method(name:"addShaped",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<List<crafttweaker.api.item.IIngredient>>", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addAttunementAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTSkill")){method(name:"setLevelStaggering",type:"void",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.command.ICommand")){method(name:"getTabCompletions",type:"java.util.List",params: [arg0: "crafttweaker.api.server.IServer", arg1: "crafttweaker.api.command.ICommandSender", arg2: "List<java.lang.String>", arg3: "crafttweaker.api.world.IBlockPos", ])}
contributor(context(ctype: "com.codetaylor.mc.advancedmortars.modules.mortar.integration.crafttweaker.ZenMortar")){method(name:"addRecipe",type:"void",params: [arg0: "List<java.lang.String>", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "crafttweaker.api.block.IBlockStateMatcher")){method(name:"withMatchedValuesForProperty",type:"crafttweaker.api.block.IBlockStateMatcher",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.drops.BlockDropsTweaker")){method(name:"addBlockDropLock",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.immersiveengineering.IEMultiBlockGates")){method(name:"addGate",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.bloodmagic.AlchemyTable")){method(name:"addPotionRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", arg1: "crafttweaker.api.potions.IPotionEffect", arg2: "int", arg3: "int", arg4: "int", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.harvestlevel.HarvestLevelTweaker")){method(name:"addToolLevelLock",type:"void",params: [arg0: "int", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.expand.IEntityAspectExpansion")){method(name:"setAspects",type:"void",params: [arg0: "crafttweaker.api.entity.IEntityDefinition", arg1: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCauldron")){method(name:"add",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "snownee.cuisine.plugins.crafttweaker.CTMortar")){method(name:"add",type:"void",params: [arg0: "List<crafttweaker.api.item.IIngredient>", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTUnlockable")){method(name:"setRequirements",type:"void",params: [arg0: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.thaumcraft.handlers.handlers.ArcaneWorkbench")){method(name:"registerShapelessRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<com.blamejared.compat.thaumcraft.handlers.aspects.CTAspectStack>", arg4: "crafttweaker.api.item.IItemStack", arg5: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "elucent.rootsclassic.compat.RitualZen")){method(name:"setRitualIncense",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "crafttweaker.api.recipes.IRecipeFunction", arg3: "crafttweaker.api.recipes.IRecipeAction", ])}
contributor(context(ctype: "com.blamejared.compat.refinedstorage.Solderer")){method(name:"addRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.skillhiding.VisibilityLockTweaker")){method(name:"addVisibilityLock",type:"void",params: [arg0: "codersafterdark.compatskills.common.compats.reskillable.playerexpansion.wrapper.CTSkill", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "elucent.rootsclassic.compat.RitualZen")){method(name:"setRitualIngredients",type:"void",params: [arg0: "java.lang.String", arg1: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.RuneAltar")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "int", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Hopper")){method(name:"addSoulUrnRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IIngredient", arg1: "List<crafttweaker.api.item.IItemStack>", arg2: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.weapon.DamageLockTweaker")){method(name:"addDamageLock",type:"void",params: [arg0: "double", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.actuallyaddition.Empowerer")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "crafttweaker.api.item.IIngredient", arg2: "crafttweaker.api.item.IIngredient", arg3: "crafttweaker.api.item.IIngredient", arg4: "crafttweaker.api.item.IIngredient", arg5: "crafttweaker.api.item.IIngredient", arg6: "int", arg7: "int", arg8: "List<float>", ])}
contributor(context(ctype: "com.blamejared.compat.thermalexpansion.Centrifuge")){method(name:"addRecipe",type:"void",params: [arg0: "List<crafttweaker.api.item.WeightedItemStack>", arg1: "crafttweaker.api.item.IItemStack", arg2: "crafttweaker.api.liquid.ILiquidStack", arg3: "int", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.gamestages.gamestageunlockable.GameStageUnlockable")){method(name:"addGameStageUnlockable",type:"codersafterdark.compatskills.common.compats.gamestages.gamestageunlockable.GameStageUnlockable",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "int", arg4: "java.lang.String", arg5: "int", arg6: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"addHiddenShaped",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<List<crafttweaker.api.item.IIngredient>>", arg3: "crafttweaker.api.recipes.IRecipeFunction", arg4: "crafttweaker.api.recipes.IRecipeAction", arg5: "boolean", ])}
contributor(context(ctype: "hellfirepvp.astralsorcery.common.integrations.mods.crafttweaker.tweaks.AltarRecipe")){method(name:"addTraitAltarRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IItemStack", arg2: "int", arg3: "int", arg4: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.thaumcraft.ThaumcraftTweaker")){method(name:"addKnowledgeLock",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Anvil")){method(name:"addShapeless",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addRunePage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<List<crafttweaker.api.item.IIngredient>>", arg5: "List<int>", ])}
contributor(context(ctype: "com.teamacronymcoders.contenttweaker.modules.materials.parttypes.IPartType")){method(name:"setData",type:"void",params: [arg0: "List<com.teamacronymcoders.contenttweaker.modules.materials.materialpartdata.IPartDataPiece>", ])}
contributor(context(ctype: "com.blamejared.compat.bloodmagic.AlchemyTable")){method(name:"addRecipe",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "List<crafttweaker.api.item.IIngredient>", arg2: "int", arg3: "int", arg4: "int", ])}
contributor(context(ctype: "crafttweaker.api.oredict.IOreDictEntry")){method(name:"removeItems",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "com.blamejared.compat.botania.handlers.Lexicon")){method(name:"addConjurationPage",type:"void",params: [arg0: "java.lang.String", arg1: "java.lang.String", arg2: "int", arg3: "List<crafttweaker.api.item.IItemStack>", arg4: "List<crafttweaker.api.item.IIngredient>", arg5: "List<int>", ])}
contributor(context(ctype: "crafttweaker.api.recipes.IRecipeManager")){method(name:"craft",type:"crafttweaker.api.item.IItemStack",params: [arg0: "List<List<crafttweaker.api.item.IItemStack>>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.OreDictionaryTweaker")){method(name:"addNBTOreDictLock",type:"void",params: [arg0: "crafttweaker.api.oredict.IOreDictEntry", arg1: "crafttweaker.api.data.IData", arg2: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.api.block.IBlockStateMatcher")){method(name:"allowValuesForProperty",type:"crafttweaker.api.block.IBlockStateMatcher",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.Hopper")){method(name:"addFilterRecipe",type:"void",params: [arg0: "java.lang.String", arg1: "crafttweaker.api.item.IIngredient", arg2: "List<crafttweaker.api.item.IItemStack>", arg3: "List<crafttweaker.api.item.IItemStack>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.tileentity.TileEntityLockTweaker")){method(name:"addTileEntityLock",type:"void",params: [arg0: "java.lang.String", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.minecraft.item.food.FoodTweaker")){method(name:"addSaturationLock",type:"void",params: [arg0: "float", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait")){method(name:"createNewTrait",type:"codersafterdark.compatskills.common.compats.reskillable.customcontent.CrTTrait",params: [arg0: "java.lang.String", arg1: "int", arg2: "int", arg3: "java.lang.String", arg4: "int", arg5: "List<java.lang.String>", ])}
contributor(context(ctype: "crafttweaker.mods.jei.JEI")){method(name:"addDescription",type:"void",params: [arg0: "List<crafttweaker.api.item.IItemStack>", arg1: "List<java.lang.String>", ])}
contributor(context(ctype: "com.blamejared.compat.betterwithmods.StokedCauldron")){method(name:"add",type:"void",params: [arg0: "crafttweaker.api.item.IItemStack", arg1: "crafttweaker.api.item.IItemStack", arg2: "List<crafttweaker.api.item.IIngredient>", ])}
